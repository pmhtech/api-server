<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	
	<!-- Transaction Manager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceSpied" />
    </bean>
    	
	<!-- 
		AOP 기본 
		1. Cross-Cutting ( 횡단관심사)
																	
					AppService			|트 |	|기|	<== 크로스커팅 ( 횡단관심사)
										|랜 |	| |
					BatchService		|잭 |	| |
										|션 |	| |
					기타Service			|  |    |타|
					
		
		- AOP를 사용하면 공통적인 기능을 한곳에서 정의할수 있으며 새로운기능을 적용하려고 하는
		  클래스를 수정할필요없이 그런기능을 어디에 어떻게 적용할것인지를 선언적으로 정의할수 있다.
	 -->
	<!-- 
		2.txAdvice AOP가 걸릴때(이에 대한 설정은 아래 포인트컷에 대한 설정을 보면된다.)
	-->
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes> 
		
		<!-- 
			해당 PointCut에서 실행되는 행위(BeHavior를 기술한다.)
			
			tx:method name="*" 					==========>	Method 이름은 * (모든 메소드 이름)  
			rollback-for ="Exception"			==========> Exception 일때 rollback을 시킨다.
			no-rollback-for ="com.miraeweb.mandarin.exception.UserDefineException"	
			====> UserDefineException이 일어날때는 rollback을 하지 않는다.
		-->
		
			<!--  여기에 추가로 rollBack 이 되지 말아야할 Exception을 추가로 기입하면 된다.	-->
			<!--  <tx:method name="*" rollback-for="Exception" propagation="NESTED"/>-->
			
			<tx:method name="create*" propagation="REQUIRED" 	rollback-for="Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" 	rollback-for="Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" 	rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	
	
	<aop:config>
		<!-- 
			3.	Point-Cut(포인트컷)  언제 이것들을 설정하는지에 대한 설정이다.
				RunTime 시에 각 @Service 에 시작기전 AOP 설정이 먼저 시작된다. 아래는 포인트컷 설정(언제 AOP가 시작되는지에 대한 설정)
				
				expression = execution(* com..service.impl.*Impl.*(..)) 
			
				xxx.xxx.yonsei.xxx.xxx.service.impl 의 패키지안의 
				*Impl 은 파일명이   Impl로 끝나는 모든 클래스가 해당되고
				*(..) 거기에 속한   모든 함수가 포함이 된다.
	 	-->
		<aop:pointcut id="requiredTx"	expression="execution( public * net.pmhtech..service.impl.*Impl.*(..))" />
		
		<!-- 
			즉 정리하자면
			Bean id 가  requiredTx ( 어느 지점에서 AOP가 실행이 되는건지에 대한 설정 이고 : 포인트컷)
			Bean id 가  txAdvice (어떤것을 실행시킬건지에 대한 설정이다.  : 어드바이저)		
		 -->
		<aop:advisor advice-ref="txAdvice"	pointcut-ref="requiredTx" />
	</aop:config>
	
	<!--
		Spring Core에 있는 Aop Proxying 을 이용해서 설정했다.
		그 밖에 AspectJ를 이용해서 설정이 가능하다.  
	 -->
	<tx:annotation-driven proxy-target-class="true"/>

</beans>
